package house_robber

/*
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例 1：
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。

示例 2：
输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。

提示：
	1 <= nums.length <= 100
	0 <= nums[i] <= 400
*/

// 题解: 使用动态规划
func rob(nums []int) int {
	if len(nums) == 1 {
		return nums[0]
	}

	// 前两个最优解
	opt1 := nums[0]
	opt2 := max(nums[0], nums[1])

	// 对于每个房屋可以选择偷与不偷，两种选择中利益最大的为最优解。
	// 每个最优解都由前两个最优解决定。
	for i := 2; i < len(nums); i++ {
		A := nums[i] + opt1 // 选择偷
		B := opt2           // 选择不偷
		opt1 = opt2
		opt2 = max(A, B)
	}

	return opt2
}

func max(a, b int) int {
	if a > b {
		return a
	} else {
		return b
	}
}
